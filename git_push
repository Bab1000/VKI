#!/bin/bash

# Function to print a professional log message with colors
log() {
    echo -e "\e[1;34m[INFO]\e[0m $1"
}
error() {
    echo -e "\e[1;31m[ERROR]\e[0m $1"
}
success() {
    echo -e "\e[1;32m[SUCCESS]\e[0m $1"
}

# Fetch the current branch name
log "Fetching current branch name..."
BRANCH=$(git rev-parse --abbrev-ref HEAD)
success "Current branch: $BRANCH"

# Get the list of changed files
log "Checking for changes..."
CHANGED_FILES=$(git status --porcelain)

# Check if there are changes to commit
if [ -z "$CHANGED_FILES" ]; then
    error "No changes detected. Exiting."
    exit 0
fi

log "Adding all changes to the staging area..."
git add .
success "Files added successfully."

log "Displaying staged files:"
git diff --cached --name-only | while read file; do echo -e "\e[1;33m$file\e[0m"; done

# Ask if the user wants to commit
echo -ne "\e[1;36mDo you want to commit the changes? (y/n): \e[0m"
read CONFIRM_COMMIT

if [ "$CONFIRM_COMMIT" != "y" ]; then
    error "Commit cancelled. Exiting."
    git reset
    exit 0
fi

# Prompt for a commit message
echo -ne "\e[1;36mEnter commit message: \e[0m"
read COMMIT_MSG

log "Committing changes with message: '$COMMIT_MSG'"
git commit -m "$COMMIT_MSG"
success "Commit successful."

# Ask if the user wants to push
echo -ne "\e[1;36mDo you want to push the changes? (y/n): \e[0m"
read CONFIRM_PUSH

if [ "$CONFIRM_PUSH" != "y" ]; then
    error "Push cancelled. Reverting commit."
    git reset --soft HEAD~1
    exit 0
fi

log "Pushing changes to the remote repository on branch '$BRANCH'..."
git push origin "$BRANCH"
success "Push completed successfully."

success "All operations completed successfully."
