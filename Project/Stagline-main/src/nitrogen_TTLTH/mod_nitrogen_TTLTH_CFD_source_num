!------------------------------------------------------------------------------!
! This module provides subroutines for the computation of source of conservation equations for the N-N2 system
! when using TTLTH multi-temperature model.
  MODULE mod_nitrogen_TTLTH_CFD_source

  USE mod_nitrogen_TTLTH_initialize_CFD,    ONLY: upi, una, urg, ukb, nb_ns, nb_tvib, nb_trot, nb_eq, nb_dim, nb_temp, & 
                                                 posTr, posTv, diss_imp_N2, vt_imp_mol

  IMPLICIT NONE

  REAL(KIND=8), PARAMETER :: rhoi_tol = 1.d-25
  REAL(KIND=8), PARAMETER :: Tmin = 250.d0
  REAL(KIND=8) :: Qn, Q_int

  ! Subroutine for the computations of source terms
  CONTAINS

    !------------------------------------------------------!
    ! This suroutine computes the source term due to collisional processes for the N-N2 system.
    SUBROUTINE source (rhoi, tvec, omega)

      USE mod_nitrogen_TTLTH_initialize_CFD,           ONLY: mm_N, mm_N2, Rn, Rn2, fac_keq, c1, c2, c3, c4, theta_vib, & 
                                                            mw_a, mw_b, fac_Q, mu
      USE mod_nitrogen_TTLTH_CFD_prop,                 ONLY: Q_trans, Q_int_rr_ho, get_rates, get_CV, get_VT

      INTEGER :: is
      REAL(KIND=8), PARAMETER :: ratio = 2.5d0
      REAL(KIND=8), PARAMETER :: Zr = 235.d-1
      REAL(KIND=8), PARAMETER :: C  = 111.d0
      REAL(KIND=8), PARAMETER :: T0 = 540.99d0
      REAL(KIND=8), PARAMETER :: mu0 = 1781.d-8
      REAL(KIND=8) :: sum1, sum2, tmp
      REAL(KIND=8) :: T, Tv, Tr, TTv, ln_T, ln_Tv, ln_TTv
      REAL(KIND=8) :: omega_VT, omega_CV, omega_RT, omega_CR
      REAL(KIND=8) :: tauc, visc, a, b, Trank, denom
      REAL(KIND=8) :: r, rv, dexp_r, dexp_rv, e, ev
      REAL(KIND=8) :: sigma, RT, T_m13, p, millikan, park, tau_VT_am, tau_VT_mm, tau_VT, tau_RT
      REAL(KIND=8) :: kfd, kfd_eq, keq, exp_1
      REAL(KIND=8) :: xn, xn2
      REAL(KIND=8), DIMENSION(nb_ns) :: rhoit

      REAL(KIND=8), DIMENSION(:), INTENT(IN) :: tvec, rhoi
      REAL(KIND=8), DIMENSION(:), INTENT(OUT) :: omega
      real(kind=8) :: kr_n, kr_n2, kd_n, kd_n2, omvt_n, omvt_n2, omcv_n_r, omcv_n2_r, omcv_n_d, omcv_n2_d
      
	  ! Temperatures and other useful data
      T      = tvec(1)
      Tr     = tvec(posTr)
      Tv     = tvec(posTv)

      ! Application of a fix in order to avoid numerical problems   
      IF (T.LT.Tmin)  T = Tmin
      IF (Tr.LT.Tmin) Tr = Tmin
      IF (Tv.LT.Tmin) Tv = Tmin

    ! Chemical source terms
	  call get_rates(T,Tv,kr_N,kr_N2,kd_N,kd_N2)
	  
      ! Species concentrations (a fix is applied in order to avoid numerical problems)
      xn       = rhoi(1)/mm_N
      rhoit(1) = MAX(xn*mm_N,rhoi_tol) 

      xn2      = rhoi(2)/mm_N2
      rhoit(2) = MAX(xn2*mm_N2,rhoi_tol) 
     
      ! Mass production terms (dissociation by N impact)
      exp_1    = xn*(kd_N*xn2 - xn*xn*kr_N)
      omega(1) = 2.d0*exp_1*mm_N
      omega(2) = - exp_1*mm_N2

      ! Dissociation by N2 impact (de-activated for comparison against the NASA Ames database for the N-N2 system)
      IF (diss_imp_N2.EQV..TRUE.) THEN

         exp_1  = xn2*(kd_N2*xn2 - xn*xn*kr_N2)
 
         omega(1) = omega(1) + 2.d0*exp_1*mm_N
         omega(2) = omega(2) - exp_1*mm_N2

      ENDIF

      omega(nb_ns + 1:nb_ns + nb_dim + 1) = 0.d0

      IF (nb_tvib.EQ.1) THEN

         ! Static pressure
         p = (rhoit(1)*Rn + rhoit(2)*Rn2)*T

		! VT and CV sources terms
		call get_VT(T,Tv,OmVT_N,OmVT_N2)
		call get_CV(T,Tv,OmCV_N_R,OmCV_N2_R,OmCV_N_D,OmCV_N2_D)
		 
		! VT transfer in N2-N only
		IF (vt_imp_mol.EQV..FALSE.) THEN
		 	Omega_VT = OmVT_N * xn2*xn
			Omega_CV = OmCV_N_R * xn**3 - OmCV_N_D * xn2*xn
		! VT transfer also in N2-N2 collisions
		ELSE
			Omega_VT = OmVT_N * xn2*xn + OmVT_N2 * xn2**2
			Omega_CV = OmCV_N_R * xn**3 + OmCV_N2_R * xn**2*xn2 - OmCV_N_D * xn2*xn - OmCV_N2_D * xn2**2
		ENDIF

        omega(nb_ns + nb_dim + posTv) = Omega_CV + Omega_VT

      ENDIF

      ! TTLTHer model for rotational relaxation
      IF (nb_trot.EQ.1) THEN

         ! Static pressure
         p = (rhoit(1)*Rn + rhoit(2)*Rn2)*T

         ! Dynamic viscosity 
         a     = 0.555d0*T0 + C
         Trank = T*5.d0/9.d0
         b     = 0.555d0*Trank + C
         visc  = mu0*(a/b)*(Trank/T0)**1.5

         ! Collision time 
         tauc = upi*visc/(4.d0*p)

         tmp   = 80.d0/T
         denom = (1 + 0.5d0*(upi**1.5)*(tmp**0.5) + (0.25d0*upi**2 + upi)*tmp)

         ! TTLTHer expression for rotational relaxation time
         tau_RT = Zr*tauc/denom        

         omega_CR = Rn2*Tr*omega(2) 
         omega_RT = rhoit(2)*Rn2*(T - Tr)/tau_RT

         omega(nb_ns + nb_dim + posTr) = Omega_CR + Omega_RT

      ENDIF

    END SUBROUTINE source

    !------------------------------------------------------!
    ! This suroutine computes the source term and its Jacobian due to collisional processes for the N-N2 system.
    ! For sake of simplicity the Jacobian is computed with respect to primitive variables. The transformaton in order
    ! to obtaind its expression in terms of conservative variables is performed outside.
    SUBROUTINE source_Jac (rhoi, tvec, omega, domega_dp)

      USE mod_nitrogen_TTLTH_initialize_CFD,           ONLY: mm_N, mm_N2, fac_keq, m_ratio, ov_m_ratio, c1, c2, c3, c4
      USE mod_nitrogen_TTLTH_CFD_prop,                 ONLY: Q_trans_der, Q_int_rr_ho_der

      INTEGER :: is, start
      REAL(KIND=8) :: T, Tr, Tv, TTv, ln_T, ln_Tv, ln_TTv, omega_VT, omega_CV
      REAL(KIND=8) :: kfd, kbd, kfd_eq, keq, exp_1, exp_2, exp_3, tmp1, tmp2
      REAL(KIND=8) :: xn, xn2, xns 
      REAL(KIND=8) :: df_dT, df_dTv, dkf_dT, dkf_dTv, dkeq_dT, fac_dkf, dkf_eq_dT, dQn_dT, dQint_dT, & 
                          dexp_eq
      
      REAL(KIND=8), DIMENSION(nb_ns + nb_temp) :: dOmegaV_dP 
      REAL(KIND=8), DIMENSION(nb_ns) :: rhoit

      REAL(KIND=8), DIMENSION(:), INTENT(IN)  :: tvec, rhoi
      REAL(KIND=8), DIMENSION(:), INTENT(OUT) :: omega
      REAL(KIND=8), DIMENSION(:), INTENT(OUT) :: domega_dp

	  real(KIND=8), DIMENSION(nb_temp) :: tvec_pr

      ! Initialization
      omega     = 0.d0
      domega_dp = 0.d0
      szomg = size(omega)
      
      T      = tvec(1)
      Tr     = tvec(posTr) 
      Tv     = tvec(posTv)

	  allocate(omg(szomg))
      allocate(omgp(szomg))
      allocate(rhoip(szomg-2))


      call source (rhoi, tvec, omega)
        
      do i=1,szomg-3 ! boucle sur les espèces
        	rhoip = rhoi
        	if(rhoi(i)<1.d-50) then
        		dXi = 1.d-50
        	else
        		dXi = 1.d-6*rhoi(i)
       		endif    
            
			  rhoip    = rhoi
        	  rhoip(i) = rhoi(i) + dXi	
        	
			call source(rhoip,tvec,omgp)
        	
			do j=1,szomg-2 ! boucle sur les sources à dériver: N, v, Tv
                    domega_dp((j-1)*(szomg-1)+i) = (omgp(j)-omg(j))/dXi
            enddo
      enddo
        
	   dT = 1.d-6*T
		tvec_pr(1) = T+dT
		tvec_pr(2) = Tv
        call source(rhoi,tvec_pr,omgp)
	    do j=1,szomg-2
           domega_dp((j-1)*(szomg-1)+szomg-2) = (omgp(j)-omg(j))/dT
        enddo

       dTv = 1.d-6*Tv
	   	tvec_pr(1) = T
		tvec_pr(2) = Tv+dTv
        call source(rhoi,tvec_pr,omgp)
	    do j=1,szomg-2
           domega_dp((j-1)*(szomg-1)+szomg-1) = (omgp(j)-omg(j))/dTv
        enddo

        omega = omg
        
        deallocate(omg)
        deallocate(omgp)
        deallocate(rhoip)


    END SUBROUTINE source_Jac

    !------------------------------------------------------!
    ! This subroutine computes the source term due to VT and CV transfer in collisions between N and N2 species
    SUBROUTINE energy_transfer (rhoi, T, Tv, omega_n2, Omega_VT, Omega_CV, domega_n2_dP, dOmegaV_dP)

      USE mod_nitrogen_TTLTH_initialize_CFD,         ONLY: mm_N, mm_N2, mu, theta_vib, mw_a, mw_b
	  use mod_nitrogen_TTLTH_CFD_prop,				only: get_CV, get_VT

      REAL(KIND=8), PARAMETER :: ratio = 2.5d0
      REAL(KIND=8) :: e, ev, sigma, p, millikan, park, tau_VT, tau_VT_am, tau_VT_mm, dtauVT_dn, dtauVT_dn2, dtauVT_dT
      REAL(KIND=8) :: dtauVT_am_dn, dtauVT_am_dn2, dtauVT_mm_dn, dtauVT_mm_dn2, dtauVT_am_dT, dtauVT_mm_dT
      REAL(KIND=8) :: sum1, sum2, dsum2_dn, dsum2_dn2, dsum2_dT, sum2s
      REAL(KIND=8) :: tmp1, tmp2, tmp3, tmp4
      REAL(KIND=8) :: cp, cpv, OmegaVT_div_tauVT, fac_1, fac_2, Tr, Trv, dexp_Tr, dexp_Trv, RT, T_m13
      REAL(KIND=8) :: tauVT_div_p, dmillikan_dT, dpark_dT, dsigma_dT

      REAL(KIND=8), INTENT(IN) :: T, Tv, omega_n2
      REAL(KIND=8), DIMENSION(:), INTENT(IN) :: rhoi
      REAL(KIND=8), INTENT(OUT) :: Omega_VT, Omega_CV
      REAL(KIND=8), DIMENSION(:), INTENT(IN) :: domega_n2_dP
      REAL(KIND=8), DIMENSION(:), INTENT(OUT) :: dOmegaV_dP
	  real(kind=8) :: Nn, Nn2
	  real(kind=8) :: OmVT_N, OMVT_N2, OMCV_N_R, OMCV_N2_R, OMCV_N_D, OMCV_N2_D

      Nn  = rhoi(1)/mm_N
	  Nn2 = rhoi(2)/mm_N2
	  
      ! Static pressure
      !RT = urg*T
      !p = (rhoi(1)/mm_N + rhoi(2)/mm_N2)*RT

      ! VT transfer in N-N2 collisions only
      call get_VT(T,Tv,OmVT_N,OmVT_N2)
	  call get_CV(T,Tv,OmCV_N_R,OmCV_N2_R,OmCV_N_D,OmCV_N2_D)
		 
	  IF (vt_imp_mol.EQV..FALSE.) THEN
		 
		 Omega_VT = OmVT_N * Nn2*Nn
         Omega_CV = OmCV_N_R * Nn**3 - OmCV_N_D * Nn2*Nn

       ! VT transfer also in N2-N2 collisions
	  ELSE

		 Omega_VT = OmVT_N * Nn2*Nn + OmVT_N2 * Nn2**2
         Omega_CV = OmCV_N_R * Nn**3 + OmCV_N2_R * Nn**2*Nn2 - OmCV_N_D * Nn2*Nn - OmCV_N2_D * Nn2**2

      ENDIF

      ! Jacobian matrix row (vibrational energy conservation equation)
      ! Derivatives with respect to N and N2 species densities
      !dOmegaV_dP(1) = - OmegaVT_div_tauVT*dtauVT_dn  + domega_n2_dP(1)*ev
      !dOmegaV_dP(2) = - OmegaVT_div_tauVT*dtauVT_dn2 + Omega_VT/rhoi(2) + domega_n2_dP(2)*ev

      ! Derivatives with respect to T, Tr and Tv
      !tau_VT = 1.d0/tau_VT
      !dOmegaV_dP(3) =   rhoi(2)*cp*tau_VT  - OmegaVT_div_tauVT*dtauVT_dT + domega_n2_dP(3)*ev
      !dOmegaV_dP(4) = 0.d0
      !dOmegaV_dP(3 + nb_tvib) = - rhoi(2)*cpv*tau_VT + domega_n2_dP(4)*ev + omega_n2*cpv
       dOmegaV_dP = 0.d0
    END SUBROUTINE energy_transfer

  END MODULE mod_nitrogen_TTLTH_CFD_source
!------------------------------------------------------------------------------!
